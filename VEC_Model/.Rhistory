obs_2 <- as.data.frame(M1.jorls$rlm$model$`z@Z0`[,2])
colnames(obs_2) <- c('edu.d')
ajuste_2 <- cbind(obs_2,hat_2)
ajuste_2 <- ajuste_2 %>%
mutate(time=row_number())
gf_ajuste_2 <- ggplot(ajuste_2,aes(time))+
geom_line(aes(y=edu.d))+
geom_line(aes(y=edu.d_hat),color='red')+
ggtitle('edu.d_hat')
hat_3 <- as.data.frame(M1.jorls$rlm$fitted.values[,3])
colnames(hat_3) <- c('salud.d_hat')
obs_3 <- as.data.frame(M1.jorls$rlm$model$`z@Z0`[,3])
colnames(obs_3) <- c('salud.d')
ajuste_3 <- cbind(obs_3,hat_3)
ajuste_3 <- ajuste_3 %>%
mutate(time=row_number())
gf_ajuste_3 <- ggplot(ajuste_3,aes(time))+
geom_line(aes(y=salud.d))+
geom_line(aes(y=salud.d_hat),color='red')+
ggtitle('salud.d_hat')
hat_4 <- as.data.frame(M1.jorls$rlm$fitted.values[,4])
colnames(hat_4) <- c('rec_imp.d_hat')
obs_4 <- as.data.frame(M1.jorls$rlm$model$`z@Z0`[,4])
colnames(obs_4) <- c('rec_imp.d')
ajuste_4 <- cbind(obs_4,hat_4)
ajuste_4 <- ajuste_4 %>%
mutate(time=row_number())
gf_ajuste_4 <- ggplot(ajuste_4,aes(time))+
geom_line(aes(y=rec_imp.d))+
geom_line(aes(y=rec_imp.d_hat),color='red')+
ggtitle('rec_imp.d_hat')
multiplot(gf_ajuste_1,gf_ajuste_2,gf_ajuste_3,gf_ajuste_4,cols=2)
plot(irf(vec2var(M1,r=rel_coint_aux),n.ahead=3,response='edu',boot=TRUE))
plot(irf(vec2var(M1,r=rel_coint_aux),n.ahead=3,response='rec_imp',boot=TRUE))
BIC(vec2var(M1,r=rel_coint_aux))
predict(vec2var(M1,r=rel_coint_aux))
ln_pib_cte
edu
library(bookdown)
library(readxl)
library(ggplot2)
library(tidyverse)
library(plotly)
library(urca)
library(forecast)
library(lubridate)
library(vars)
library(texreg)
library(ggpubr)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
grafica_serie <- function(base_in, eje_y, titulo, titulo_y) {
theme_set( theme_gray())
tmp_gf <- ggplot(data=base_in, aes_string(x='year', y=eje_y)) +
geom_line(size = 1) +
ggtitle(titulo) +
ylab(titulo_y) +
scale_x_continuous("Año",  breaks = base_in$year) +
theme(plot.title = element_text( size=14, face="bold.italic",hjust=0.5),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.y = element_text( size=10, face="bold"))
return(tmp_gf)
}
graf_latex <- function(grafica1, grafica2, nombre){
ruta_dir <- '/Users/omardiaz/Google Drive/Tesis_Lic/V2/Tesis Latex/images'
ruta_def <- paste(ruta_dir,nombre,sep="/")
ggarrange(grafica1, grafica2, ncol = 2, nrow = 1) +
ggsave(ruta_def, width = 15, height = 6)
unlink(nombre)
}
graf_latex1 <- function(grafica1, nombre){
ruta_dir <- '/Users/omardiaz/Google Drive/Tesis_Lic/V2/Tesis Latex/images'
ruta_def <- paste(ruta_dir,nombre,sep="/")
ggarrange(grafica1, ncol = 1, nrow = 1) +
ggsave(ruta_def, width = 15, height = 6)
unlink(nombre)
}
extract.summary.lm <- function (model, include.rsquared = TRUE, include.adjrs = TRUE,
include.nobs = TRUE, include.fstatistic = FALSE, include.rmse = TRUE,
...)
{
s <- model;
names <- rownames(s$coef)
co <- s$coef[, 1]
se <- s$coef[, 2]
pval <- s$coef[, 4]
rs <- s$r.squared
adj <- s$adj.r.squared
n <- length(s$residuals)
gof <- numeric()
gof.names <- character()
gof.decimal <- logical()
if (include.rsquared == TRUE) {
gof <- c(gof, rs)
gof.names <- c(gof.names, "R$^2$")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.adjrs == TRUE) {
gof <- c(gof, adj)
gof.names <- c(gof.names, "Adj. R$^2$")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.nobs == TRUE) {
gof <- c(gof, n)
gof.names <- c(gof.names, "Num. obs.")
gof.decimal <- c(gof.decimal, FALSE)
}
if (include.fstatistic == TRUE) {
fstat <- s$fstatistic[[1]]
gof <- c(gof, fstat)
gof.names <- c(gof.names, "F statistic")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.rmse == TRUE && !is.null(s$sigma[[1]])) {
rmse <- s$sigma[[1]]
gof <- c(gof, rmse)
gof.names <- c(gof.names, "RMSE")
gof.decimal <- c(gof.decimal, TRUE)
}
tr <- createTexreg(coef.names = names, coef = co, se = se,
pvalues = pval, gof.names = gof.names, gof = gof, gof.decimal = gof.decimal)
return(tr)
}
setMethod("extract",  signature = 'summary.lm', definition = extract.summary.lm)
# automatically create a bib database for R packages
knitr::write_bib(
c(.packages(),
'bookdown', 'readxl', 'knitr', 'lubridate','texreg', 'rmarkdown','WDI','ggplot2','tidyverse','plotly','urca','forecast','vars'),
'packages.bib')
series_db <- read_excel("Datos/Series Tesis Recolección.xlsx", sheet = "Datos Finales")
series_db
series_db$log_GDP_corriente <- log(series_db$GDP_corriente)
series_db$log_GDP_constante <- log(series_db$GDP_constante)
series_db$log_Poblacion_Total <- log(series_db$Poblacion_Total)
series_db
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'GDP_corriente',
titulo = 'PIB a precios corrientes',
titulo_y = 'PIB Corriente')
gf1_1 <- grafica_serie(base_in = series_db,
eje_y = 'GDP_constante',
titulo = 'PIB a precios constantes',
titulo_y = 'PIB Constante')
graf_latex(grafica1 = gf1,
grafica2 = gf1_1,
nombre = 'PIB_normal.pdf')
gf2 <- grafica_serie(base_in = series_db,
eje_y = 'log_GDP_corriente',
titulo = 'Logaritmo del PIB a precios corrientes',
titulo_y = 'log(PIB Corriente)')
gf2_2 <- grafica_serie(base_in = series_db,
eje_y = 'log_GDP_constante',
titulo = 'Logaritmo del PIB a precios constantes',
titulo_y = 'log(PIB Constante)')
graf_latex(grafica1 = gf2,
grafica2 = gf2_2,
nombre = 'log_PIB.pdf')
gf1
gf1_1
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'Recaudacion_Impositiva_PorcGDP',
titulo = 'Recaudación Gubernamental (%PIB)',
titulo_y = 'Recaudación Impositiva')
graf_latex1(grafica1 = gf1,
nombre = 'Recaudacion.pdf')
gf1
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'Gasto_Salud_PorcGDP',
titulo = 'Gasto en Salud Pública (%PIB)',
titulo_y = 'Gasto en Salud Pública')
graf_latex1(grafica1 = gf1,
nombre = 'Gasto_Salud.pdf')
gf1
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'Gasto_Educacion_PorcGDP',
titulo = 'Gasto en Educación Pública (%PIB)',
titulo_y = 'Gasto en Educación Pública')
graf_latex1(grafica1 = gf1,
nombre = 'Gasto_Educacion.pdf')
gf1
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'Desempleo_Total',
titulo = 'Tasa de Desempleo',
titulo_y = 'Tasa de Desempleo')
graf_latex1(grafica1 = gf1,
nombre = 'Tasa_Desempleo.pdf')
gf1
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'log_GDP_constante',
titulo = 'Logaritmo del PIB a precios constantes',
titulo_y = 'log(PIB Constante)')
gf1
ln_pib_cte <- ts(series_db$log_GDP_constante,start = 1991, end = 2016, frequency = 1)
ln_pib_cte.ct <- ur.df(ln_pib_cte,lags=0,type='trend')
summary(ln_pib_cte.ct)
plot(ln_pib_cte.ct)
ln_pib_cte.co <- ur.df(ln_pib_cte,type='drift',lags=0)
summary(ln_pib_cte.co)
plot(ln_pib_cte.co)
d.ln_pib_cte <- diff(ln_pib_cte,differences = 1)
d.ln_pib_cte.n <- ur.df(d.ln_pib_cte,type="none",lags=0)
summary(d.ln_pib_cte.n)
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'Gasto_Educacion_PorcGDP',
titulo = 'Gasto en Educación Pública (%PIB)',
titulo_y = 'Gasto en Educación Pública')
gf1
edu <- ts(series_db$Gasto_Educacion_PorcGDP,start = 1991, end = 2016, frequency = 1)
edu.ct <- ur.df(edu,lags=4,type='trend')
summary(edu.ct)
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'log_GDP_constante',
titulo = 'Logaritmo del PIB a precios constantes',
titulo_y = 'log(PIB Constante)')
gf1
ln_pib_cte <- ts(series_db$log_GDP_constante,start = 1991, end = 2016, frequency = 1)
ln_pib_cte.ct <- ur.df(ln_pib_cte,lags=0,type='trend')
summary(ln_pib_cte.ct)
plot(ln_pib_cte.ct)
ln_pib_cte.co <- ur.df(ln_pib_cte,type='drift',lags=0)
summary(ln_pib_cte.co)
plot(ln_pib_cte.co)
d.ln_pib_cte <- diff(ln_pib_cte,differences = 1)
d.ln_pib_cte.n <- ur.df(d.ln_pib_cte,type="none",lags=0)
summary(d.ln_pib_cte.n)
plot(d.ln_pib_cte.n)
plot(ln_pib_cte)
plot(diff(ln_pib_cte, differences = 1))
plot(diff(ln_pib_cte, differences = 2))
plot(diff(ln_pib_cte, differences = 3))
plot(diff(ln_pib_cte, differences = 4))
var(ln_pib_cte)
var(diff(ln_pib_cte, differences = 1))
var(diff(ln_pib_cte, differences = 2))
var(diff(ln_pib_cte, differences = 3))
var(diff(ln_pib_cte, differences = 4))
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'Gasto_Salud_PorcGDP',
titulo = 'Gasto en Salud Pública (%PIB)',
titulo_y = 'Gasto en Salud Pública')
gf1
salud <- ts(series_db$Gasto_Salud_PorcGDP,start = 1991, end = 2016, frequency = 1)
salud.ct <- ur.df(salud,lags=0,type='trend')
summary(salud.ct)
plot(salud.ct)
salud.co <- ur.df(salud,type='drift',lags=0)
summary(salud.co)
plot(salud.co)
salud.n <- ur.df(salud,type='none',lags=0)
summary(salud.n)
d.salud <- diff(salud,differences = 1)
d.salud.n <- ur.df(d.salud,type="none",lags=0)
summary(d.salud.n)
plot(d.salud.n)
plot(salud)
plot(diff(salud, differences = 1))
plot(diff(salud, differences = 2))
plot(diff(salud, differences = 3))
plot(diff(salud, differences = 4))
var(salud)
var(diff(salud, differences = 1))
var(diff(salud, differences = 2))
var(diff(salud, differences = 3))
var(diff(salud, differences = 4))
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'Gasto_Educacion_PorcGDP',
titulo = 'Gasto en Educación Pública (%PIB)',
titulo_y = 'Gasto en Educación Pública')
gf1
edu <- ts(series_db$Gasto_Educacion_PorcGDP,start = 1991, end = 2016, frequency = 1)
edu.ct <- ur.df(edu,lags=4,type='trend')
summary(edu.ct)
plot(edu.ct)
edu.co <- ur.df(edu,type='drift',lags=4)
summary(edu.co)
plot(edu.co)
d.edu <- diff(edu,differences = 1)
d.edu.n <- ur.df(d.edu,type="none",lags=3)
summary(d.edu.n)
plot(d.edu.n)
plot(edu)
plot(diff(edu, differences = 1))
plot(diff(edu, differences = 2))
plot(diff(edu, differences = 3))
var(edu)
var(diff(edu, differences = 1))
var(diff(edu, differences = 2))
var(diff(edu, differences = 3))
gf1 <- grafica_serie(base_in = series_db,
eje_y = 'Recaudacion_Impositiva_PorcGDP',
titulo = 'Recaudación Gubernamental (%PIB)',
titulo_y = 'Recaudación Impositiva')
gf1
rec_imp <- ts(series_db$Recaudacion_Impositiva_PorcGDP,start = 1991, end = 2016, frequency = 1)
rec_imp.ct <- ur.df(rec_imp,lags=3,type='trend')
summary(rec_imp.ct)
plot(rec_imp.ct)
rec_imp.co <- ur.df(rec_imp,type='drift',lags=3)
summary(rec_imp.co)
plot(rec_imp.co)
rec_imp.n <- ur.df(rec_imp,type='none',lags=3)
summary(rec_imp.n)
d.rec_imp <- diff(rec_imp,differences = 1)
d.rec_imp.n <- ur.df(d.rec_imp,type="none",lags=2)
summary(d.rec_imp.n)
plot(d.rec_imp.n)
plot(rec_imp)
plot(diff(rec_imp, differences = 1))
plot(diff(rec_imp, differences = 2))
plot(diff(rec_imp, differences = 3))
var(rec_imp)
var(diff(rec_imp, differences = 1))
var(diff(rec_imp, differences = 2))
var(diff(rec_imp, differences = 3))
library(imputeTS)
library(forecast)
serie_edu_unfill <- read_excel("Datos/Series Tesis Recolección.xlsx",sheet ="Gasto en Educación", na = "NA")
library(bookdown)
library(readxl)
library(ggplot2)
library(tidyverse)
library(plotly)
library(urca)
library(forecast)
library(lubridate)
library(vars)
library(texreg)
library(ggpubr)
# Multiple plot function
#
# ggplot objects can be passed in ..., or to plotlist (as a list of ggplot objects)
# - cols:   Number of columns in layout
# - layout: A matrix specifying the layout. If present, 'cols' is ignored.
#
# If the layout is something like matrix(c(1,2,3,3), nrow=2, byrow=TRUE),
# then plot 1 will go in the upper left, 2 will go in the upper right, and
# 3 will go all the way across the bottom.
#
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
grafica_serie <- function(base_in, eje_y, titulo, titulo_y) {
theme_set( theme_gray())
tmp_gf <- ggplot(data=base_in, aes_string(x='year', y=eje_y)) +
geom_line(size = 1) +
ggtitle(titulo) +
ylab(titulo_y) +
scale_x_continuous("Año",  breaks = base_in$year) +
theme(plot.title = element_text( size=14, face="bold.italic",hjust=0.5),
axis.text.x = element_text(angle = 90, vjust = 0.5),
axis.title.y = element_text( size=10, face="bold"))
return(tmp_gf)
}
graf_latex <- function(grafica1, grafica2, nombre){
ruta_dir <- '/Users/omardiaz/Google Drive/Tesis_Lic/V2/Tesis Latex/images'
ruta_def <- paste(ruta_dir,nombre,sep="/")
ggarrange(grafica1, grafica2, ncol = 2, nrow = 1) +
ggsave(ruta_def, width = 15, height = 6)
unlink(nombre)
}
graf_latex1 <- function(grafica1, nombre){
ruta_dir <- '/Users/omardiaz/Google Drive/Tesis_Lic/V2/Tesis Latex/images'
ruta_def <- paste(ruta_dir,nombre,sep="/")
ggarrange(grafica1, ncol = 1, nrow = 1) +
ggsave(ruta_def, width = 15, height = 6)
unlink(nombre)
}
extract.summary.lm <- function (model, include.rsquared = TRUE, include.adjrs = TRUE,
include.nobs = TRUE, include.fstatistic = FALSE, include.rmse = TRUE,
...)
{
s <- model;
names <- rownames(s$coef)
co <- s$coef[, 1]
se <- s$coef[, 2]
pval <- s$coef[, 4]
rs <- s$r.squared
adj <- s$adj.r.squared
n <- length(s$residuals)
gof <- numeric()
gof.names <- character()
gof.decimal <- logical()
if (include.rsquared == TRUE) {
gof <- c(gof, rs)
gof.names <- c(gof.names, "R$^2$")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.adjrs == TRUE) {
gof <- c(gof, adj)
gof.names <- c(gof.names, "Adj. R$^2$")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.nobs == TRUE) {
gof <- c(gof, n)
gof.names <- c(gof.names, "Num. obs.")
gof.decimal <- c(gof.decimal, FALSE)
}
if (include.fstatistic == TRUE) {
fstat <- s$fstatistic[[1]]
gof <- c(gof, fstat)
gof.names <- c(gof.names, "F statistic")
gof.decimal <- c(gof.decimal, TRUE)
}
if (include.rmse == TRUE && !is.null(s$sigma[[1]])) {
rmse <- s$sigma[[1]]
gof <- c(gof, rmse)
gof.names <- c(gof.names, "RMSE")
gof.decimal <- c(gof.decimal, TRUE)
}
tr <- createTexreg(coef.names = names, coef = co, se = se,
pvalues = pval, gof.names = gof.names, gof = gof, gof.decimal = gof.decimal)
return(tr)
}
setMethod("extract",  signature = 'summary.lm', definition = extract.summary.lm)
# automatically create a bib database for R packages
knitr::write_bib(
c(.packages(),
'bookdown', 'readxl', 'knitr', 'lubridate','texreg', 'rmarkdown','WDI','ggplot2','tidyverse','plotly','urca','forecast','vars'),
'packages.bib')
library(imputeTS)
library(forecast)
serie_edu_unfill <- read_excel("Datos/Series Tesis Recolección.xlsx",sheet ="Gasto en Educación", na = "NA")
serie_edu_unfill <- serie_edu_unfill[1:26,]
serie_edu_unfill
aux <- as.ts(serie_edu_unfill$Gasto_Educacion_PorcGDP)
statsNA(aux)
aux2 <- na.interp(aux)
aux2
plot(aux)
plot(aux2)
modelo<-auto.arima(aux2)
summary(modelo)
modelo
modelo$coef
modelo$sigma2
modelo$mask
modelo$loglik
modelo$arma
modelo$call
modelo$fitted
modelo$x
modelo$xreg
modelo$xreg
modelo$model
modelo$code
modelo$series
modelo$call
modelo$arma
citation("urca")
toBibtex(citation('urca'))
toBibtex(citation('forecast'))
